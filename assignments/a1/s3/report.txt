Stage 3 Report:

The only addition is the `msort` subroutine, which merge sorts a given string array in place, returning the length of the resulting array in r0. 

Version info:
tested on ARMSim v.2.0.1 with legacy SWI instruction set. 

Testing instructions:
To run, load `tests.s` and `msort.s` both together into ARMSim, with tests before msort, and then run tests. The main test is msort_test, which takes as input a list of n strings, options to remove duplicates and ignore case, and then prints a sorted (in dictionary order) list of strings, which is a subset of the input strings (depending on the duplicates/ignore case options specified).

Testing is interactive, and requires the user to input/output strings to the program

Tests run:

length of list: 5
String 1: APPLE
String 2: APPlE
String 3: APPle
String 4: Apple
String 5: apple
duplicate removal (1 to remove, 0 otherwise): 0
case (1 to ignore case, 0 otherwise): 0
APPLE APPlE APPle Apple apple

length of list: 5
String 1: APPLE
String 2: APPle
String 3: apPLE
String 4: ball
String 5: banjo
duplicate removal (1 to remove, 0 otherwise): 1
case (1 to ignore case, 0 otherwise): 1
apPLE ball banjo 

length of list: 6
String 1: APple
String 2: apple
String 3: eat
String 4: ball
String 5: aardvark
String 6: fish
duplicate removal (1 to remove, 0 otherwise): 0
case (1 to ignore case, 0 otherwise): 0
APple aardvark apple ball eat fish 

length of list: 6
String 1: apple
String 2: ball
String 3c: at
String 4: ball
String 5: BALL
String 6: bat
duplicate removal (1 to remove, 0 otherwise): 1
case (1 to ignore case, 0 otherwise): 0
BALL apple ball bat cat

length of list: 6
String 1: apple
String 2: APPLE
String 3: APPle
String 4: apPLE
String 5: ball
String 6: BALL
duplicate removal (1 to remove, 0 otherwise): 0
case (1 to ignore case, 0 otherwise): 1
apPLE APPle APPLE apple BALL ball 

Comments:
further comments/documentation about each function are contained in the source files.
