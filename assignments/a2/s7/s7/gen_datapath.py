# gen_datapath.py
# takes in a bunch of VHDL files and generates a CPU datapath from them, with the
# appropriate port maps

import os
import re

entities = {}

NL = '\n'
header = """-- DATAPATH AUTOGENERATED USING gen_datapath.py

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.MyTypes.all;

entity cpu_datapath is
    port (

"""

trunk = """
    );
end cpu_datapath;

architecture cpu_datapath_arc of cpu_datapath is
begin

"""

footer = """

end cpu_datapath_arc;"""


files = [
    "alu.vhdl",
    "regfile.vhdl",
    "mem.vhdl",
    "pmconnect.vhdl",
    "shifter.vhdl",
    "predicator.vhdl",
    "instr_decoder.vhdl"
]

def entities_from_files(filenames):
    # TODO rudimentary entity parser

    entities = {}
    for fname in filenames:
        infile = open(fname, "r")
        signal_list = []
        lraw = ''.join(infile.readlines())
        lines = re.sub(r"--(.*)\n", '\n', lraw)
        entname = re.search(r"entity\s+([a-zA-Z0-9_]+)\s+is", lines).group(1);
        # the only gripe here is that we can't use brackets while defining types:
        # has to be in letters eg word instead of std_logic_vector(31 downto 0)
        result = re.search(r"port\s+\(\s+([a-zA-Z0-9\s:_;]+)\)", lines);
        if result:
            signals = result.group(1).split(";")
            for signal in signals:
                rs = re.search(r"\s*([A-Za-z0-9_]+)\s*:\s*(in|out)\s+([A-Za-z0-9_\(\)]+)", signal)
                if rs:
                    signal_list.append({'sig_name': f"{entname}_{rs.group(1)}", 'inout': rs.group(2), 'datatype': rs.group(3)})
        else:
            print(f"Could not parse for {entname}")
        entities[entname] = signal_list

    return entities

def print_to_file(filename, entities):

    # entity: string -> {'sig_name', 'inout', 'datatype'} list

    port_map_buffer = []
    entity_buffer = []
    for (entity,ports) in entities.items():
        signals = list(map(lambda port: f"{port['sig_name']} : {port['inout']} {port['datatype']}", ports))
        signals = [f'-- {entity}'] + signals
        signals = list(map(lambda x: f"        {x}", signals))
        signames = list(map(lambda x: x['sig_name'], ports))

        port_map_buffer.append(';\n'.join(signals+[""]))
        entity_buffer.append(f"    {entity}: entity work.{entity} port map ({', '.join(signames)});")
    
    port_map_buffer[-1] = port_map_buffer[-1][:-2]

    with open(filename, "w") as outfile:
        outfile.write(f"{header}{NL.join(port_map_buffer)}{trunk}{NL.join(entity_buffer)}{footer}")
        outfile.close()

print_to_file("cpu_datapath.vhdl", entities_from_files(files))
